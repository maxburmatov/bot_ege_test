import asyncio

from aiogram import Router, Bot, F

from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.payload import decode_payload
from core.database.metods.register_student import check_add_student, add_student, add_student_utc
from core.database.metods.get_student import get_name
from core.keyboards.reply import choose_purpose_menu, back_menu, main_menu, time_utc_keyboard
from core.states.states import StateRegisterUser

from core.lexicon.lexicon import LEXICON, LEXICON_BUTTON, LEXICON_BUTTON_UTC

router = Router(name=__name__)


@router.message(CommandStart())
async def process_start_command(message: Message, state: FSMContext, command: Command, bot: Bot):
    await state.update_data(invite_tg_id=await check_invited(command.args))

    if await check_add_student(message.from_user.id):
        await state.set_state(StateRegisterUser.IDENT_PURPOSE)
        await new_student_message(message.from_user.id, message.from_user.first_name, bot)
    else:
        await old_student_message(message.from_user.id, bot)


@router.message(
    (StateFilter(StateRegisterUser.IDENT_PURPOSE)), (
            (F.text == LEXICON_BUTTON["purpose_1"]) | (F.text == LEXICON_BUTTON["purpose_2"]) | (
            F.text == LEXICON_BUTTON["purpose_3"]) | (F.text == LEXICON_BUTTON["purpose_4"]))
)
async def process_ident_purpose(message: Message, state: FSMContext, bot: Bot):
    answer_user = message.text
    data = await state.get_data()
    invite_tg_id = data['invite_tg_id']

    match answer_user:
        case "–¥–æ 70 –±–∞–ª–ª–æ–≤":
            purpose = 1
        case "70-85 –±–∞–ª–ª–æ–≤":
            purpose = 2
        case "85-95 –±–∞–ª–ª–æ–≤":
            purpose = 3
        case "95+ –±–∞–ª–ª–æ–≤":
            purpose = 4
        case _:
            purpose = 0

    await send_info_invite(invite_tg_id, message.from_user.first_name, bot)
    await add_student(message.from_user.id, message.from_user.first_name, purpose, invite_tg_id)
    await message.answer("ü§ñ: –û—Ç–ª–∏—á–Ω–æ! –Ø –ø–æ–Ω—è–ª —Ç–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π! –ï—Å–ª–∏ —á—Ç–æ, —Ü–µ–ª—å –ø–æ –±–∞–ª–ª–∞–º –º–æ–∂–Ω–æ "
                         "–ø–æ–º–µ–Ω—è—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤ —Å–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç–µ.")
    await message.answer("ü§ñ: –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, —á—Ç–æ–±—ã —è –∑–Ω–∞–ª —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –≤—Ä–µ–º–µ–Ω–∏"
                         "–∏ –ø—Ä–∏—Å—ã–ª–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è!", reply_markup=await time_utc_keyboard())
    await state.set_state(StateRegisterUser.IDENT_UTC)


@router.message(StateFilter(StateRegisterUser.IDENT_PURPOSE))
async def process_ident_purpose(message: Message, state: FSMContext, bot: Bot):
    await message.answer("ü§ñ: –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∂–µ–ª–∞–µ–º—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤!", reply_markup=choose_purpose_menu)
    await state.set_state(StateRegisterUser.IDENT_PURPOSE)


@router.message(StateFilter(StateRegisterUser.IDENT_UTC),
                F.text.in_([LEXICON_BUTTON_UTC[key] for key in LEXICON_BUTTON_UTC])
                )
async def process_ident_purpose(message: Message, state: FSMContext, bot: Bot):
    answer_user = message.text
    utc = [key for key in LEXICON_BUTTON_UTC if LEXICON_BUTTON_UTC[key] == answer_user]
    utc_user = utc[0]
    utc_user.split("_")
    utc_user = int(utc_user[-1])
    await add_student_utc(message.from_user.id, utc_user)
    await message.answer("ü§ñ: –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –ø–æ—Ä–∞ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –¥–µ–ª—É! "
                         "–ù–∞–∂–∏–º –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Ü©Ô∏è –í –º–µ–Ω—é!", reply_markup=back_menu)
    await state.clear()

@router.message(StateFilter(StateRegisterUser.IDENT_UTC))
async def process_ident_purpose(message: Message, state: FSMContext, bot: Bot):
    await message.answer("ü§ñ: –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ç–≤–æ–∏–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º!", reply_markup=await time_utc_keyboard())
    await state.set_state(StateRegisterUser.IDENT_UTC)


async def check_invited(command_args):
    if command_args is not None:
        args = command_args
        invite_tg_id = decode_payload(args)
        return invite_tg_id


async def send_info_invite(invite_tg_id, name_friend, bot: Bot):
    if invite_tg_id is not None:
        await bot.send_message(invite_tg_id, f"ü§ñ: –¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª –¥—Ä—É–≥–∞: {name_friend}! –ì–æ—Ç–æ–≤—Ç–µ—Å—å –≤–º–µ—Å—Ç–µ!")


async def old_student_message(tg_id, bot: Bot):
    await bot.send_sticker(tg_id, "CAACAgIAAxkBAAJSUWU8qHpCzGN_-v73X6wiyVBck6EEAAIBAAMWbkwSH3u_BkTp24swBA")
    await bot.send_chat_action(tg_id, action="typing")
    await asyncio.sleep(2)
    await bot.send_message(tg_id, f"ü§ñ: –†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, {await get_name(tg_id)}!"
                                  f" –° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?", reply_markup=main_menu)


async def new_student_message(tg_id, name, bot: Bot):
    await bot.send_message(tg_id, f"ü§ñ: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}!"
                                  f" –Ø —É—á–µ–±–Ω—ã–π –±–æ—Ç-—Ç—Ä–µ–Ω–∞–∂–µ—Ä! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ!")
    await bot.send_chat_action(tg_id, action="typing")
    await asyncio.sleep(5)
    await bot.send_message(tg_id, f"ü§ñ: –°–æ –º–Ω–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç—Ç–æ—á–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –¥–æ –∏–¥–µ–∞–ª–∞!"
                                  f" –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞, –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–∏—è–º –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è,"
                                  f" –ø—Ä–æ—Ä–µ—à–∏–≤–∞—Ç—å —Ü–µ–ª—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ –∑–∞–¥–∞–Ω–∏–π –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏!")
    await bot.send_chat_action(tg_id, action="typing")
    await asyncio.sleep(10)
    await bot.send_message(tg_id,
                           f"ü§ñ: –ù–û! –ß—Ç–æ–±—ã —Ç–µ–±–µ –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ —è —Å–¥–µ–ª–∞–ª —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –∏ –Ω–µ–º–Ω–æ–∂–∫–æ –∏–≥—Ä–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É."
                           f" –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏ –±—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —è –±—É–¥—É –Ω–∞—á–∏—Å–ª—è—Ç—å —Ç–µ–±–µ –±–∞–ª–ª—ã, –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ –∑–∞–±–∏—Ä–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ."
                           f" –ß—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã, —è –±—É–¥—É –ø–æ–¥–∫–∏–¥—ã–≤–∞—Ç—å —Ç–µ–±–µ –∫–≤–µ—Å—Ç—ã. –¢–∞–∫–∂–µ –≤—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è"
                           f"–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∏–≤–µ–Ω—Ç—ã")
    await bot.send_chat_action(tg_id, action="typing")
    await asyncio.sleep(10)
    await bot.send_message(tg_id,
                           f"ü§ñ: –ß–µ–º –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤ —É —Ç–µ–±—è –±—É–¥–µ—Ç, —Ç–µ–º –≤—ã—à–µ –±—É–¥–µ—Ç —Ç–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥. –í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –ª—É—á—à–∏–µ —É—á–µ–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç –æ—Ç –º–µ–Ω—è –ø–æ–¥–∞—Ä–æ—á–∫–∏!"
                           f" –ë—Ä–æ—Å—å –≤—ã–∑–æ–≤ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º –∏–ª–∏ –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º, –Ω—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —Ä–µ–±—è—Ç–∞–º–∏!")
    await bot.send_chat_action(tg_id, action="typing")
    await asyncio.sleep(8)
    await bot.send_message(tg_id, f"ü§ñ: –ê —Ç–µ–ø–µ—Ä—å –ø–æ—Ä–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –¥–µ–ª—É!"
                                  f" –î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è –Ω–∞ –∫–∞–∫–∏–µ –±–∞–ª–ª—ã —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Å–¥–∞—Ç—å –ï–ì–≠. –í—ã–±–µ—Ä–∏ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤!",
                           reply_markup=choose_purpose_menu)
