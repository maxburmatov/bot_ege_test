__all__ = ("router",)

import asyncio

from aiogram import Router, Bot, F

from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from core.database.metods.check_student import check_solve_daily_task
from core.keyboards.reply import solve_menu, solve_tasks_menu, solve_variants_menu, begin_solve_menu, back_solve, \
    solve_menu_keyboard, theory_menu_keyboard

from core.lexicon.lexicon import LEXICON_BUTTON
from core.utils.functions import delete_message

router = Router(name=__name__)

@router.message((F.text == LEXICON_BUTTON["solve"]) | (F.text == LEXICON_BUTTON["back_solve"]) | (F.text == "/solve")
                )
async def info_random_task(message: Message, state: FSMContext, bot: Bot):

    await delete_message(message, message.chat.id, message.message_id)

    await state.clear()

    await bot.send_chat_action(message.chat.id, action="typing")
    await asyncio.sleep(1)

    await message.answer("ü§ñ: –ß—Ç–æ –±—É–¥–µ–º —Ä–µ—à–∞—Ç—å?", reply_markup=await solve_menu_keyboard())

@router.message(F.text == LEXICON_BUTTON["solve_tasks"])
async def info_random_task(message: Message, state: FSMContext, bot: Bot):

    await delete_message(message, message.chat.id, message.message_id)

    await bot.send_chat_action(message.chat.id, action="typing")
    await asyncio.sleep(1)

    await message.answer("ü§ñ: –†–µ—à–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Ö–æ–¥–∏–º —Ç–µ—Å—Ç?", reply_markup=solve_tasks_menu)


@router.message(F.text == LEXICON_BUTTON["solve_variant"])
async def info_random_task(message: Message, state: FSMContext, bot: Bot):

    await delete_message(message, message.chat.id, message.message_id)

    await bot.send_chat_action(message.chat.id, action="typing")
    await asyncio.sleep(1)

    await message.answer("ü§ñ: –ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–µ—à–∞–µ–º?", reply_markup=solve_variants_menu)

@router.message(F.text == LEXICON_BUTTON["solve_daily_task"])
async def info_random_task(message: Message, state: FSMContext, bot: Bot):

    await delete_message(message, message.chat.id, message.message_id)

    await bot.send_chat_action(message.chat.id, action="typing")
    await asyncio.sleep(1)

    if await check_solve_daily_task(message.from_user.id):
        await message.answer(f"ü§ñ: –ó–¥–µ—Å—å —è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–æ–±–∞–≤–ª—è—é —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!",
                             reply_markup=begin_solve_menu)
    else:
        await message.answer("ü§ñ: –£ —Ç–µ–±—è —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –¥–Ω—è! –ñ–¥—É —Ç–µ–±—è –∑–∞–≤—Ç—Ä–∞!", reply_markup=back_solve)


@router.message(F.text == LEXICON_BUTTON["solve_theory"])
async def info_random_task(message: Message, state: FSMContext, bot: Bot):

    await delete_message(message, message.chat.id, message.message_id)

    await bot.send_chat_action(message.chat.id, action="typing")
    await asyncio.sleep(1)

    await message.answer("ü§ñ: –í—ã–±–µ—Ä–∏ –∫–∞–∫—É—é —Ç–µ–æ—Ä–∏—é —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å!", reply_markup=await theory_menu_keyboard())



